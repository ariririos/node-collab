define(["exports"],function(e){"use strict";function t(e,t){var r=void 0===arguments[2]?null:arguments[2],n=void 0===arguments[3]?{}:arguments[3],o=new XMLHttpRequest;return new Promise(function(s,i){try{if(o.open(e,t,!0),n.headers)for(var u=n.headers,c=Array.isArray(u),f=0,u=c?u:u[Symbol.iterator]();;){var d;if(c){if(f>=u.length)break;d=u[f++]}else{if(f=u.next(),f.done)break;d=f.value}var p=a(d,2),l=p[0],y=p[1];o.setRequestHeader(l,y)}o.onreadystatechange=function(){if(4===o.readyState)if(200===o.status){var e=void 0;e=n.json===!0?JSON.parse(o.response):o.response,s(e)}else i(new Error(o.statusText))},o.onerror=function(e){i(e)},o.send(r)}catch(v){i(v)}})}function r(e){return t("GET",e)}function n(e,r){return new Promise(function(n,a){var o=new Map;try{if("object"==typeof r)throw new Error("data is an object");JSON.parse(r),o.set("Content-Type","application/json")}catch(s){try{if("data is an object"!==s.message)return a(new Error("data is not valid JSON"));r=JSON.stringify(r),o.set("Content-Type","application/json")}catch(i){a(new Error("data is not of an acceptable type"))}}n(t("POST",e,r,{headers:o}))})}var a=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e)){for(var r,n=[],a=e[Symbol.iterator]();!(r=a.next()).done&&(n.push(r.value),!t||n.length!==t););return n}throw new TypeError("Invalid attempt to destructure non-iterable instance")};e["default"]=t,e.get=r,e.post=n,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMveGhyLmpzIl0sIm5hbWVzIjpbImRlZmluZSIsImV4cG9ydHMiLCJhc3luY1hociIsIm1ldGhvZCIsInVybCIsImRhdGEiLCJ1bmRlZmluZWQiLCJhcmd1bWVudHMiLCJvcHRzIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9wZW4iLCJoZWFkZXJzIiwiX2l0ZXJhdG9yIiwiX2lzQXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJfaSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3JlZiIsImxlbmd0aCIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJfcmVmMiIsIl9zbGljZWRUb0FycmF5IiwiaGVhZGVyIiwic2V0UmVxdWVzdEhlYWRlciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJyZXN1bHQiLCJqc29uIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2UiLCJFcnJvciIsInN0YXR1c1RleHQiLCJvbmVycm9yIiwiZSIsInNlbmQiLCJnZXQiLCJwb3N0IiwiTWFwIiwic2V0IiwibWVzc2FnZSIsInN0cmluZ2lmeSIsImVyciIsImFyciIsImkiLCJPYmplY3QiLCJfc3RlcCIsIl9hcnIiLCJwdXNoIiwiVHlwZUVycm9yIiwiZGVmaW5lUHJvcGVydHkiXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFRLFdBQVksU0FBVUMsR0FDOUIsWUFDZSxTQUFTQyxHQUFTQyxFQUFRQyxHQU1yQyxHQU4wQ0MsR0FBSUMsU0FBQUMsVUFBQSxHQUFHLEtBQUlBLFVBQUEsR0FBRUMsRUFBSUYsU0FBQUMsVUFBQSxNQUFLQSxVQUFBLEdBQzlERSxFQUFNLEdBQUlDLGVBQ2QsT0FBTyxJQUFJQyxTQUFRLFNBQUNDLEVBQVNDLEdBQzNCLElBRUUsR0FEQUosRUFBSUssS0FBS1gsRUFBUUMsR0FBSyxHQUNsQkksRUFBS08sUUFDUCxJQUFBLEdBQUFDLEdBQTRCUixFQUFLTyxRQUFPRSxFQUFBQyxNQUFBQyxRQUFBSCxHQUFBSSxFQUFBLEVBQUFKLEVBQUFDLEVBQUFELEVBQUFBLEVBQUFLLE9BQUFDLGNBQUEsQ0FRcEMsR0FBSUMsRUFDSixJQUFJTixFQUFVLENBQ1osR0FBSUcsR0FBTUosRUFBVVEsT0FBUSxLQUM1QkQsR0FBT1AsRUFBVUksU0FDWixDQUVMLEdBREFBLEVBQUtKLEVBQVVTLE9BQ1hMLEVBQUdNLEtBQU0sS0FDYkgsR0FBT0gsRUFBR08sTUFFWixHQUFJQyxHQUFRQyxFQUFlTixFQUFNLEdBakIzQk8sRUFBTUYsRUFBQSxHQUFFRCxFQUFLQyxFQUFBLEVBQ3JCbkIsR0FBSXNCLGlCQUFpQkQsRUFBUUgsR0FHakNsQixFQUFJdUIsbUJBQXFCLFdBQ3ZCLEdBQXVCLElBQW5CdkIsRUFBSXdCLFdBQ04sR0FBbUIsTUFBZnhCLEVBQUl5QixPQUFnQixDQUN0QixHQUFJQyxHQUFNN0IsTUFFUjZCLEdBREUzQixFQUFLNEIsUUFBUyxFQUNQQyxLQUFLQyxNQUFNN0IsRUFBSThCLFVBRWY5QixFQUFJOEIsU0FFZjNCLEVBQVF1QixPQUdSdEIsR0FBTyxHQUFJMkIsT0FBTS9CLEVBQUlnQyxjQUkzQmhDLEVBQUlpQyxRQUFVLFNBQUFDLEdBQ1o5QixFQUFPOEIsSUFFVGxDLEVBQUltQyxLQUFLdkMsR0FFWCxNQUFPc0MsR0FDTDlCLEVBQU84QixNQUlOLFFBQVNFLEdBQUl6QyxHQUNsQixNQUFPRixHQUFTLE1BQU9FLEdBRWxCLFFBQVMwQyxHQUFLMUMsRUFBS0MsR0FDeEIsTUFBTyxJQUFJTSxTQUFRLFNBQUNDLEVBQVNDLEdBQzNCLEdBQUlFLEdBQVUsR0FBSWdDLElBQ2xCLEtBQ0UsR0FBb0IsZ0JBQVQxQyxHQUNULEtBQU0sSUFBSW1DLE9BQU0sb0JBRWxCSCxNQUFLQyxNQUFNakMsR0FDWFUsRUFBUWlDLElBQUksZUFBZ0Isb0JBRTlCLE1BQU9MLEdBQ0wsSUFDRSxHQUFrQixzQkFBZEEsRUFBRU0sUUFHSixNQUFPcEMsR0FBTyxHQUFJMkIsT0FBTSwwQkFGeEJuQyxHQUFPZ0MsS0FBS2EsVUFBVTdDLEdBSXhCVSxFQUFRaUMsSUFBSSxlQUFnQixvQkFFOUIsTUFBT0csR0FDTHRDLEVBQU8sR0FBSTJCLE9BQU0sdUNBR3JCNUIsRUFBUVYsRUFBUyxPQUFRRSxFQUFLQyxHQUFPVSxRQUFBQSxPQTlEdkMsR0FBSWMsR0FBaUIsU0FBVXVCLEVBQUtDLEdBQUssR0FBSW5DLE1BQU1DLFFBQVFpQyxHQUFRLE1BQU9BLEVBQVksSUFBSS9CLE9BQU9DLFdBQVlnQyxRQUFPRixHQUFNLENBQWlCLElBQUssR0FBd0NHLEdBQXhEQyxLQUFvQnhDLEVBQVlvQyxFQUFJL0IsT0FBT0MsY0FBc0JpQyxFQUFRdkMsRUFBVVMsUUFBUUMsT0FBUzhCLEVBQUtDLEtBQUtGLEVBQU01QixRQUFZMEIsR0FBS0csRUFBS2hDLFNBQVc2QixLQUFZLE1BQU9HLEdBQWUsS0FBTSxJQUFJRSxXQUFVLHdEQUUzVXpELEdBQVEsV0FGY0MsRUFHdEJELEVBaUNjNEMsSUFBQUEsRUFoQ2Q1QyxFQW1DYzZDLEtBQUFBLEVBMENkUSxPQUFPSyxlQUFlMUQsRUFBUyxjQUM3QjBCLE9BQU8iLCJmaWxlIjoic2NyaXB0cy94aHIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgYXN5bmNYaHIgKi9cbid1c2Ugc3RyaWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFzeW5jWGhyKG1ldGhvZCwgdXJsLCBkYXRhID0gbnVsbCwgb3B0cyA9IHt9KSB7XG4gIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB0cnkge1xuICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICAgICAgaWYgKG9wdHMuaGVhZGVycykge1xuICAgICAgICBmb3IgKGxldCBbaGVhZGVyLCB2YWx1ZV0gb2Ygb3B0cy5oZWFkZXJzKSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgICAgICBpZiAob3B0cy5qc29uID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IHhoci5yZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKHhoci5zdGF0dXNUZXh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgeGhyLm9uZXJyb3IgPSBlID0+IHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfTtcbiAgICAgIHhoci5zZW5kKGRhdGEpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgcmVqZWN0KGUpO1xuICAgIH1cbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0KHVybCkge1xuICByZXR1cm4gYXN5bmNYaHIoJ0dFVCcsIHVybCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9zdCh1cmwsIGRhdGEpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgaGVhZGVycyA9IG5ldyBNYXAoKTtcbiAgICB0cnkge1xuICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgaXMgYW4gb2JqZWN0Jyk7XG4gICAgICB9XG4gICAgICBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoZS5tZXNzYWdlID09PSAnZGF0YSBpcyBhbiBvYmplY3QnKSB7XG4gICAgICAgICAgZGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgICB9IGVsc2UgeyAvL2RhdGEgaXMgaW52YWxpZCBKU09OXG4gICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ2RhdGEgaXMgbm90IHZhbGlkIEpTT04nKSk7XG4gICAgICAgIH1cbiAgICAgICAgaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICB9XG4gICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2RhdGEgaXMgbm90IG9mIGFuIGFjY2VwdGFibGUgdHlwZScpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzb2x2ZShhc3luY1hocignUE9TVCcsIHVybCwgZGF0YSwge2hlYWRlcnN9KSk7XG4gIH0pO1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9