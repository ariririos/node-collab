define(["exports","xhr","utils"],function(t,e,n){"use strict";function r(t){var e=void 0===arguments[1]?s[t]:arguments[1],n=void 0===arguments[2]?new Map:arguments[2],r=void 0===arguments[3]?"":arguments[3];return function(){Polymer["import"](["components/"+t+"/"+t+".html"],function(){var a=500;$("main").fadeOut(a,function(){for(var i="",s=n,u=Array.isArray(s),c=0,s=u?s:s[Symbol.iterator]();;){var l;if(u){if(c>=s.length)break;l=s[c++]}else{if(c=s.next(),c.done)break;l=c.value}var f=o(l,2),d=f[0],m=f[1];i+=" "+d+"='"+m+"'"}$("main").html("<"+t+i+">"+r+"</"+t+">"),$("#page-title, title").text(e),$("main").fadeIn(a)})})}()}var o=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t)){for(var n,r=[],o=t[Symbol.iterator]();!(n=o.next()).done&&(r.push(n.value),!e||r.length!==e););return r}throw new TypeError("Invalid attempt to destructure non-iterable instance")},a=e.post,i=n.errorToJSON,s=n.pageNames,u=n.zeptoMethods;u($);var c=io(),l="";window.loadTemplate=r,i(),window.onerror=function(t,e,n,r,o){var i=o||{message:t,url:e,line:n,col:r};a("/test",i instanceof Error?i.toJSON():JSON.stringify(i))["catch"](function(t){return console.error(t)})},r("choose-mode"),c.on("connect",function(){setTimeout(function(){$("#status-indicator")["class"]("fa fa-link"),$("#status-text").text(" Connection established").fadeIn(1e3),setTimeout(function(){$("#status-text").fadeOut(1e3,function(){return $("#status-indicator").addClass("no-text")})},2500)},2500)}),t.socket=c,t.currPage=l,t.loadTemplate=r,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvaW5kZXguanMiXSwibmFtZXMiOlsiZGVmaW5lIiwiZXhwb3J0cyIsIl94aHIiLCJfdXRpbHMiLCJsb2FkVGVtcGxhdGUiLCJuYW1lIiwidGl0bGUiLCJ1bmRlZmluZWQiLCJhcmd1bWVudHMiLCJwYWdlTmFtZXMiLCJhdHRycyIsIk1hcCIsImNvbnRlbnQiLCJQb2x5bWVyIiwiZmFkZVRpbWUiLCIkIiwiZmFkZU91dCIsInN0ciIsIl9pdGVyYXRvciIsIl9pc0FycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwiX2kiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9yZWYiLCJsZW5ndGgiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiX3JlZjIiLCJfc2xpY2VkVG9BcnJheSIsIl9uYW1lIiwiaHRtbCIsInRleHQiLCJmYWRlSW4iLCJhcnIiLCJpIiwiT2JqZWN0IiwiX3N0ZXAiLCJfYXJyIiwicHVzaCIsIlR5cGVFcnJvciIsInBvc3QiLCJlcnJvclRvSlNPTiIsInplcHRvTWV0aG9kcyIsInNvY2tldCIsImlvIiwiY3VyclBhZ2UiLCJ3aW5kb3ciLCJvbmVycm9yIiwibWVzc2FnZSIsInVybCIsImxpbmUiLCJjb2wiLCJlcnIiLCJyZXN1bHQiLCJFcnJvciIsInRvSlNPTiIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb25zb2xlIiwiZXJyb3IiLCJvbiIsInNldFRpbWVvdXQiLCJhZGRDbGFzcyIsImRlZmluZVByb3BlcnR5Il0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBUSxVQUFXLE1BQU8sU0FBVSxTQUFVQyxFQUFTQyxFQUFNQyxHQUU3RCxZQUtBLFNBQVNDLEdBQWFDLEdBS2xCLEdBTHdCQyxHQUFLQyxTQUFBQyxVQUFBLEdBQUdDLEVBQVVKLEdBQUtHLFVBQUEsR0FBRUUsRUFBS0gsU0FBQUMsVUFBQSxHQUFHLEdBQUlHLEtBQUtILFVBQUEsR0FBRUksRUFBT0wsU0FBQUMsVUFBQSxHQUFHLEdBQUVBLFVBQUEsRUFRaEYsT0FBTyxZQU5WSyxRQUFPLFdBQVEsY0FBZVIsRUFBSSxJQUFJQSxFQUFJLFNBQVUsV0FDakQsR0FBSVMsR0FBVyxHQUNmQyxHQUFFLFFBQVFDLFFBQVFGLEVBQVUsV0FFMUIsSUFBQSxHQURJRyxHQUFNLEdBQ1ZDLEVBQTBCUixFQUFLUyxFQUFBQyxNQUFBQyxRQUFBSCxHQUFBSSxFQUFBLEVBQUFKLEVBQUFDLEVBQUFELEVBQUFBLEVBQUFLLE9BQUFDLGNBQUEsQ0FRekIsR0FBSUMsRUFDSixJQUFJTixFQUFVLENBQ1osR0FBSUcsR0FBTUosRUFBVVEsT0FBUSxLQUM1QkQsR0FBT1AsRUFBVUksU0FDWixDQUVMLEdBREFBLEVBQUtKLEVBQVVTLE9BQ1hMLEVBQUdNLEtBQU0sS0FDYkgsR0FBT0gsRUFBR08sTUFFWixHQUFJQyxHQUFRQyxFQUFlTixFQUFNLEdBakI3Qk8sRUFBSUYsRUFBQSxHQUFFRCxFQUFLQyxFQUFBLEVBQ25CYixJQUFHLElBQVFlLEVBQUksS0FBS0gsRUFBSyxJQUUzQmQsRUFBRSxRQUFRa0IsS0FBSSxJQUFLNUIsRUFBT1ksRUFBRyxJQUFJTCxFQUFPLEtBQUtQLEVBQUksS0FDakRVLEVBQUUsc0JBQXNCbUIsS0FBSzVCLEdBQzdCUyxFQUFFLFFBQVFvQixPQUFPckIsVUFoQnJCLEdBQUlpQixHQUFpQixTQUFVSyxFQUFLQyxHQUFLLEdBQUlqQixNQUFNQyxRQUFRZSxHQUFRLE1BQU9BLEVBQVksSUFBSWIsT0FBT0MsV0FBWWMsUUFBT0YsR0FBTSxDQUFpQixJQUFLLEdBQXdDRyxHQUF4REMsS0FBb0J0QixFQUFZa0IsRUFBSWIsT0FBT0MsY0FBc0JlLEVBQVFyQixFQUFVUyxRQUFRQyxPQUFTWSxFQUFLQyxLQUFLRixFQUFNVixRQUFZUSxHQUFLRyxFQUFLZCxTQUFXVyxLQUFZLE1BQU9HLEdBQWUsS0FBTSxJQUFJRSxXQUFVLHlEQUNyVUMsRUFBSXpDLEVBQUp5QyxLQUNBQyxFQUFXekMsRUFBWHlDLFlBQWFuQyxFQUFTTixFQUFUTSxVQUFXb0MsRUFBWTFDLEVBQVowQyxZQUNoQ0EsR0FBYTlCLEVBQ2IsSUFBSStCLEdBQVNDLEtBQU1DLEVBQVcsRUFnQjlCQyxRQUFPN0MsYUFBZUEsRUFDdEJ3QyxJQUNBSyxPQUFPQyxRQUFVLFNBQUNDLEVBQVNDLEVBQUtDLEVBQU1DLEVBQUtDLEdBQ3pDLEdBQUlDLEdBQVNELElBQ1hKLFFBQUFBLEVBQVNDLElBQUFBLEVBQUtDLEtBQUFBLEVBQU1DLElBQUFBLEVBRXRCWCxHQUFLLFFBQVNhLFlBQWtCQyxPQUFRRCxFQUFPRSxTQUFXQyxLQUFLQyxVQUFVSixJQUFRLFNBQU8sU0FBQUQsR0FzQnBGLE1BdEIyRk0sU0FBUUMsTUFBTVAsTUFFL0duRCxFQUFhLGVBQ2IwQyxFQUFPaUIsR0FBRyxVQUFXLFdBQ25CQyxXQUFXLFdBQ1RqRCxFQUFFLHFCQUFvQixTQUFPLGNBQzdCQSxFQUFFLGdCQUFnQm1CLEtBQUssMkJBQTJCQyxPQUFPLEtBQ3pENkIsV0FBVyxXQUNUakQsRUFBRSxnQkFBZ0JDLFFBQVEsSUFBTSxXQXdCNUIsTUF4QmtDRCxHQUFFLHFCQUFxQmtELFNBQVMsY0FDckUsT0FDRixRQTJCSGhFLEVBdEJNNkMsT0FBQUEsRUF1Qk43QyxFQXZCYytDLFNBQUFBLEVBd0JkL0MsRUF4QndCRyxhQUFBQSxFQXlCeEJrQyxPQUFPNEIsZUFBZWpFLEVBQVMsY0FDN0I0QixPQUFPIiwiZmlsZSI6InNjcmlwdHMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBqc2hpbnQgZGV2ZWw6IHRydWUgKi9cbi8qIGdsb2JhbCBQb2x5bWVyLCBpbywgJCAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHtwb3N0fSBmcm9tICd4aHInO1xuaW1wb3J0IHtlcnJvclRvSlNPTiwgcGFnZU5hbWVzLCB6ZXB0b01ldGhvZHN9IGZyb20gJ3V0aWxzJztcbnplcHRvTWV0aG9kcygkKTtcbmxldCBzb2NrZXQgPSBpbygpLCBjdXJyUGFnZSA9ICcnO1xuZnVuY3Rpb24gbG9hZFRlbXBsYXRlKG5hbWUsIHRpdGxlID0gcGFnZU5hbWVzW25hbWVdLCBhdHRycyA9IG5ldyBNYXAoKSwgY29udGVudCA9ICcnKSB7IC8vVE9ETzogUHJvbWlzZSBpbnRlcmZhY2U/IG9yIGVlIGludGVyZmFjZVxuICAvL0ZJWE1FIGNyZWF0ZSBtYXAgZm9yIHRlbXBsYXRlbmFtZSAtPiB0aXRsZVxuIFBvbHltZXIuaW1wb3J0KFtgY29tcG9uZW50cy8ke25hbWV9LyR7bmFtZX0uaHRtbGBdLCAoKSA9PiB7XG4gICAgbGV0IGZhZGVUaW1lID0gNTAwO1xuICAgICQoJ21haW4nKS5mYWRlT3V0KGZhZGVUaW1lLCAoKSA9PiB7XG4gICAgICBsZXQgc3RyID0gJyc7XG4gICAgICBmb3IgKGxldCBbbmFtZSwgdmFsdWVdIG9mIGF0dHJzKSB7XG4gICAgICAgIHN0ciArPSBgICR7bmFtZX09JyR7dmFsdWV9J2A7XG4gICAgICB9XG4gICAgICAkKCdtYWluJykuaHRtbChgPCR7bmFtZX0ke3N0cn0+JHtjb250ZW50fTwvJHtuYW1lfT5gKTtcbiAgICAgICQoJyNwYWdlLXRpdGxlLCB0aXRsZScpLnRleHQodGl0bGUpO1xuICAgICAgJCgnbWFpbicpLmZhZGVJbihmYWRlVGltZSk7XG4gICAgfSk7XG4gIH0pO1xufVxud2luZG93LmxvYWRUZW1wbGF0ZSA9IGxvYWRUZW1wbGF0ZTsgLy9GSVhNRSByZW1vdmUgdGhpcyBsaW5lXG5lcnJvclRvSlNPTigpO1xud2luZG93Lm9uZXJyb3IgPSAobWVzc2FnZSwgdXJsLCBsaW5lLCBjb2wsIGVycikgPT4ge1xuICBsZXQgcmVzdWx0ID0gZXJyIHx8IHtcbiAgICBtZXNzYWdlLCB1cmwsIGxpbmUsIGNvbFxuICB9O1xuICBwb3N0KCcvdGVzdCcsIHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yID8gcmVzdWx0LnRvSlNPTigpIDogSlNPTi5zdHJpbmdpZnkocmVzdWx0KSkuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoZXJyKSk7XG59O1xubG9hZFRlbXBsYXRlKCdjaG9vc2UtbW9kZScpO1xuc29ja2V0Lm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAkKCcjc3RhdHVzLWluZGljYXRvcicpLmNsYXNzKCdmYSBmYS1saW5rJyk7XG4gICAgJCgnI3N0YXR1cy10ZXh0JykudGV4dCgnIENvbm5lY3Rpb24gZXN0YWJsaXNoZWQnKS5mYWRlSW4oMTAwMCk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAkKCcjc3RhdHVzLXRleHQnKS5mYWRlT3V0KDEwMDAsICgpID0+ICQoJyNzdGF0dXMtaW5kaWNhdG9yJykuYWRkQ2xhc3MoJ25vLXRleHQnKSk7XG4gICAgfSwgMjUwMCk7XG4gIH0sIDI1MDApO1xufSk7XG4vL2Vycm9yXG4vL2Rpc2Nvbm5lY3Rcbi8vcmVjb25uZWN0aW5nLCByZWNvbm5lY3RfYXR0ZW1wdCwgcmVjb25uZWN0X2Vycm9yLCByZWNvbm5lY3RfZmFpbGVkXG5leHBvcnQge3NvY2tldCwgY3VyclBhZ2UsIGxvYWRUZW1wbGF0ZX07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=